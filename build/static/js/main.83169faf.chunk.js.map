{"version":3,"sources":["App.js","index.js"],"names":["Header","react_default","a","createElement","className","Game","props","_this","Object","classCallCheck","this","tiles","possibleConstructorReturn","getPrototypeOf","call","state","oldTiles","currentTiles","free","moves","time","clearInterval","timer","_this2","setInterval","updateTime","setState","i","slice","checkVictory","Math","abs","j","t","length","floor","random","count","countInversionsNumber","concat","generateTiles","startTimer","status","_this3","stopTimer","Info","Board","onClickTile","handleTileClick","Menu","onClickNewGame","handleNewGameClick","onClickRestartGame","handleRestartGameClick","React","Component","message","stats","Fragment","boardRows","children","_loop","index","push","BoardTile","key","value","onClick","visible","tileOdd","tilePosition","trunc","buttons","MenuButton","label","victory","rootElement","document","getElementById","ReactDOM","render","App_Game"],"mappings":"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","file":"static/js/main.83169faf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\n// ======== HEADER ========\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"header-title\">GIOCO DEL 15</h1>\r\n      <h3 className=\"header-subtitle\">Progetto dimostrativo per la libreria React</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\n// ======== GAME ========\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const tiles = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, null];\r\n    this.state = {\r\n      oldTiles: tiles,\r\n      currentTiles: tiles,\r\n      free: 15,\r\n      moves: 0,\r\n      time: 0\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  startTimer() {\r\n    clearInterval(this.timer);\r\n    this.timer = setInterval(() => this.updateTime(), 1000);\r\n  }\r\n\r\n  stopTimer() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  updateTime() {\r\n    const time = this.state.time;\r\n    this.setState({ time: time + 1 });\r\n  }\r\n\r\n  // Funzione per gestire i click sulle caselle\r\n  handleTileClick(i) {\r\n    const tiles = this.state.currentTiles.slice();\r\n    const moves = this.state.moves;\r\n\r\n    if (checkVictory(tiles)) {\r\n      return;\r\n    }\r\n\r\n    const free = this.state.free;\r\n    if (Math.abs(i - free) === 1 || Math.abs(i - free) === 4) {\r\n      tiles[free] = tiles[i];\r\n      tiles[i] = null;\r\n\r\n      this.setState({\r\n        currentTiles: tiles,\r\n        free: i,\r\n        moves: moves + 1\r\n      });\r\n    }\r\n  }\r\n\r\n  // Funzione per iniziare una nuova partita\r\n  handleNewGameClick() {\r\n    const tiles = generateTiles();\r\n    const free = 0,\r\n      moves = 0,\r\n      time = 0;\r\n\r\n    this.startTimer();\r\n    this.setState({\r\n      oldTiles: tiles,\r\n      currentTiles: tiles,\r\n      free: free,\r\n      moves: moves,\r\n      time: time\r\n    });\r\n  }\r\n\r\n  // Funzione per ricominciare la partita\r\n  handleRestartGameClick() {\r\n    const tiles = this.state.oldTiles;\r\n    const free = 0,\r\n      moves = 0,\r\n      time = 0;\r\n\r\n    this.startTimer();\r\n    this.setState({\r\n      currentTiles: tiles,\r\n      free: free,\r\n      moves: moves,\r\n      time: time\r\n    });\r\n  }\r\n\r\n  // Funzione di render\r\n  render() {\r\n    const tiles = this.state.currentTiles;\r\n    const moves = this.state.moves;\r\n    const time = this.state.time;\r\n    let status;\r\n\r\n    const victory = checkVictory(tiles);\r\n    if (victory) {\r\n      status = moves === 0 ? \"idle\" : \"victory\";\r\n      this.stopTimer();\r\n    } else {\r\n      status = \"ingame\";\r\n    }\r\n\r\n    const boardOnClickTile = i => this.handleTileClick(i);\r\n    const menuOnClickNewGame = () => this.handleNewGameClick();\r\n    const menuOnClickRestartGame = () => this.handleRestartGameClick();\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <Info status={status} time={time} moves={moves} />\r\n        <Board tiles={tiles} onClickTile={boardOnClickTile} />\r\n        <Menu\r\n          status={status}\r\n          onClickNewGame={menuOnClickNewGame}\r\n          onClickRestartGame={menuOnClickRestartGame}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ======== INFO ========\r\n\r\nfunction Info(props) {\r\n  const timeMinutes = Math.floor(props.time / 60);\r\n  const timeSeconds = props.time % 60;\r\n  const time = timeMinutes + \" m \" + timeSeconds + \" s\";\r\n\r\n  let message, stats;\r\n  switch (props.status) {\r\n    default:\r\n    case \"idle\":\r\n      message = \"ðŸ™‚ Riordina le tessere dello schema da 1 a 15.\";\r\n      stats = <span>Premi il bottone in basso e inizia una nuova partita.</span>;\r\n      break;\r\n    case \"ingame\":\r\n      message = \"ðŸ¤” Sposta le tessere facendo click / tap su di esse.\";\r\n      stats = (\r\n        <>\r\n          <span>Tempo: {time}</span>\r\n          <span>Mosse: {props.moves}</span>\r\n        </>\r\n      );\r\n      break;\r\n    case \"victory\":\r\n      message = \"ðŸ˜„ Congratulazioni, ci sei riuscito!\";\r\n      stats = (\r\n        <>\r\n          <span>Tempo: {time}</span>\r\n          <span>Mosse: {props.moves}</span>\r\n        </>\r\n      );\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <div className=\"info\">\r\n      <div className=\"info-message\">{message}</div>\r\n      <div className=\"info-stats\">{stats}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// ======== BOARD ========\r\n\r\nfunction Board(props) {\r\n  const tiles = props.tiles,\r\n    onClickTile = props.onClickTile;\r\n\r\n  let boardRows = [];\r\n  for (let i = 0; i < 4; i++) {\r\n    let children = [];\r\n    for (let j = 0; j < 4; j++) {\r\n      const index = i * 4 + j;\r\n\r\n      children.push(\r\n        <BoardTile key={index} value={tiles[index]} onClick={() => onClickTile(index)} />\r\n      );\r\n    }\r\n\r\n    boardRows.push(\r\n      <div key={i} className=\"board-row\">\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div className=\"board\">{boardRows}</div>;\r\n}\r\n\r\n// ======== TILE ========\r\n\r\nfunction BoardTile(props) {\r\n  let visible = \"\",\r\n    tileOdd = \"\";\r\n\r\n  if (props.value === null) {\r\n    visible = \"hidden\";\r\n  } else {\r\n    const tilePosition = props.value - 1; // posizione della casella nello schema\r\n    const rowOdd = Math.trunc(tilePosition / 4) % 2 === 1 ? true : false;\r\n\r\n    if (rowOdd) {\r\n      tileOdd = props.value % 2 === 1 ? \"tile-odd\" : \"\";\r\n    } else {\r\n      tileOdd = props.value % 2 === 1 ? \"\" : \"tile-odd\";\r\n    }\r\n  }\r\n\r\n  const className = \"tile\" + \" \" + tileOdd + \" \" + visible;\r\n\r\n  return (\r\n    <button className={className} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\n// ======== MENU ========\r\n\r\nfunction Menu(props) {\r\n  const labelNew = \"Nuova partita\",\r\n    onClickNewGame = props.onClickNewGame;\r\n  const labelRestart = \"Ricomincia partita\",\r\n    onClickRestartGame = props.onClickRestartGame;\r\n\r\n  const buttons = (\r\n    <>\r\n      <MenuButton label={labelNew} onClick={onClickNewGame} />\r\n      {props.status !== \"idle\" ? (\r\n        <MenuButton label={labelRestart} onClick={onClickRestartGame} />\r\n      ) : null}\r\n    </>\r\n  );\r\n\r\n  return <div className=\"menu\">{buttons}</div>;\r\n}\r\n\r\n// ======== MENU BUTTON ========\r\n\r\nfunction MenuButton(props) {\r\n  return (\r\n    <button className=\"menu-button\" onClick={props.onClick}>\r\n      {props.label}\r\n    </button>\r\n  );\r\n}\r\n\r\n// ========================================\r\n\r\n// Funzione per verificare la condizione di vittoria\r\nfunction checkVictory(tiles) {\r\n  let victory = true;\r\n\r\n  for (let i = 0; i < 15; i++) {\r\n    if (tiles[i] !== i + 1) {\r\n      victory = false;\r\n    }\r\n  }\r\n\r\n  return victory;\r\n}\r\n\r\n// Funzione per generare uno schema\r\nfunction generateTiles() {\r\n  const tiles = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\r\n\r\n  // Genera una sequenza in ordine casuale\r\n  let i, j, t;\r\n  for (i = tiles.length - 1; i > 0; i--) {\r\n    j = Math.floor(Math.random() * (i + 1)); // indice casuale da 0 a i\r\n\r\n    t = tiles[i];\r\n    tiles[i] = tiles[j];\r\n    tiles[j] = t;\r\n  }\r\n\r\n  // Se il numero di inversioni di ordinamento non Ã¨ dispari, esegui uno swap di correzione\r\n  let odd = countInversionsNumber(tiles) % 2 === 1 ? true : false;\r\n  if (!odd) {\r\n    t = tiles[0];\r\n    tiles[0] = tiles[1];\r\n    tiles[1] = t;\r\n  }\r\n\r\n  return [null].concat(tiles);\r\n}\r\n\r\n// Funzione per contare le inversioni necessarie a risolvere uno schema\r\nfunction countInversionsNumber(tiles) {\r\n  let count = 0;\r\n\r\n  for (let i = 0; i < tiles.length; i++) {\r\n    for (let j = i + 1; j < tiles.length; j++) {\r\n      if (tiles[i] > tiles[j]) count++;\r\n    }\r\n  }\r\n\r\n  return count;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}